(parse '(local
            [(define x 10)
             (define A
               (class
               		(field x 2)
               		(method m (y) (+ x y))))
             (define o 10)]
            (+ 1 2)))

(lcal 
	(list 
		(my-def 'x (num 10)) 
		(my-def 'A (class '((field x 2) (method m (y) (+ x y)))))
		(my-def 'o (num 10))
	) 
	(binop #<procedure:+> (num 1) (num 2))
)

; Para probar el fragmento de codigo que va a servir para la interpretacion de la clase
#lang play

(struct obj (class values))


(define Root
  (λ (msg . vals)
    (case msg
      [(lookup)     (error "message not understood:" (first vals))]
      [(all-fields) '()]
      [else (error "root class: should not happen: " msg)])))

(define (object x y)
 (let* ([scls Root]
         ;[fields (append (scls 'all-fields)
         ;                (list (cons 'f init) ...))]
         [fields x]
         [methods y
          #|(local [(defmac (? fd) #:captures self
                    (vector-ref (obj-values self)
                                (find-last 'fd fields)))
                  (defmac (! fd v) #:captures self
                    (vector-set! (obj-values self)
                                 (find-last 'fd fields)
                                 v))
                  (defmac (--> md . args) #:captures self
                    (((scls 'lookup 'md) self) . args))]
            (list (cons 'm (λ (self)
                            (λ params body))) ...)
            )|#
          ]
         )
    (letrec ([class (λ (msg . vals)
                      (case msg
                        [(all-fields) fields]
                        [(create)
                         (let ([values (list->vector (map cdr fields))])
                           (begin
                             (printf "~v " values)
                             (obj class values)))]
                        #;[(read)
                           (vector-ref (obj-values (first vals))
                                       (find-last (second vals) fields))]
                        #;[(write)
                           (vector-set! (obj-values (first vals))
                                        (find-last (second vals) fields)
                                        (third vals))]
                        #;[(invoke)
                           (let ((method (class 'lookup (second vals))))
                             (apply (method (first vals)) (cddr vals)))]
                        [(lookup)
                         (let ([found (assoc (first vals) methods)])
                           (begin
                             (printf "~v " methods)
                           (if found
                               (cdr found)
                               (scls 'lookup (first vals)))))]))])
      class)))

(define (new class . init-vals)
  (apply class 'create init-vals))

(define (send o m arg ...)
  (let ([obj o])
    ((((obj-class obj) 'lookup 'm) obj) arg ...)))

(define a (object '((x .1)(y . 2)) '((x . (lambda (+ 1 2))))))


; ---------------------------------  ESTO TRABAJO (es una primera parte)------------------------------
#lang play

(struct obj (class values))


(define Root
  (λ (msg . vals)
    (case msg
      [(lookup)     (error "message not understood:" (first vals))]
      [(all-fields) '()]
      [else (error "root class: should not happen: " msg)])))

(define (object x y)
 (let* ([scls Root]
         ;[fields (append (scls 'all-fields)
         ;                (list (cons 'f init) ...))]
         [fields x]
         [methods y
          #|(local [(defmac (? fd) #:captures self
                    (vector-ref (obj-values self)
                                (find-last 'fd fields)))
                  (defmac (! fd v) #:captures self
                    (vector-set! (obj-values self)
                                 (find-last 'fd fields)
                                 v))
                  (defmac (--> md . args) #:captures self
                    (((scls 'lookup 'md) self) . args))]
            (list (cons 'm (λ (self)
                            (λ params body))) ...)
            )|#
          ]
         )
    (letrec ([class (λ (msg . vals)
                      (case msg
                        [(all-fields) fields]
                        [(create)
                         (let ([values (list->vector (map cdr fields))])
                           (begin
                             (printf "~v " values)
                             (obj class values)))]
                        #;[(read)
                           (vector-ref (obj-values (first vals))
                                       (find-last (second vals) fields))]
                        #;[(write)
                           (vector-set! (obj-values (first vals))
                                        (find-last (second vals) fields)
                                        (third vals))]
                        #;[(invoke)
                           (let ((method (class 'lookup (second vals))))
                             (apply (method (first vals)) (cddr vals)))]
                        [(lookup)
                         (let ([found (assoc (first vals) methods)])
                           (begin
                             (printf "~v " methods)
                           (if found
                               (cdr found)
                               (scls 'lookup (first vals)))))]))])
      class)))

(define (new class . init-vals)
  (apply class 'create init-vals))

(define (send o arg)
  ((o 'lookup arg)))

(define a (object '((x .1)(y . 2)) (list (cons 'x? (lambda() (+ 1 2))))))


;; ---------------- pequeña variación -------------
(define (send o arg vals)
  ((o 'lookup arg) vals))

(define a (object '((x .1)(y . 2)) (list (cons 'x? (lambda(y) (+ 1 y))))))

(define (new c)
  (c 'create))


; ------------------------- Para probar cuando las cosas esten cogiendo forma------------------------------
(parse '(local
	[(define x 10)
	(define A
		(class
			(field x 1)
			(field y 2)
			(method m (y) (+ x y))
		)
	)
	(define o (new A))]
	(send o m 1))
         )

;------------------------ Pa probar la funcion make-fields ------------------------------------------------
(list (field 'x (num 1)) (field 'y (num 2)) (method 'm '(y) (binop + (id 'x) (id 'y))))         

; ----------------------- Pa probar el uso de this y de cuerpo de funciones complejas --------------------
(run-val '(local
              [(define x 10)
               (define A
                 (class
                     (field u 7)
                   (field v 8)
                   (method m (y z) (+ (+ (+ (get this u) y) z) (get this v)))))
               (define o (new A))]
              (send o m 1 2)))